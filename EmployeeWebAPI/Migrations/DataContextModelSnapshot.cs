// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using EmployeeWebAPIProject.Data;

namespace EmployeeWebAPIProject.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique()
                        .HasFilter("[CityId] IS NOT NULL");

                    b.HasIndex("CountryId")
                        .IsUnique()
                        .HasFilter("[CountryId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique()
                        .HasFilter("[CountryId] IS NOT NULL");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ExitedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("JoinedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuperiorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("CountryId")
                        .IsUnique()
                        .HasFilter("[CountryId] IS NOT NULL");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SuperiorId")
                        .IsUnique()
                        .HasFilter("[SuperiorId] IS NOT NULL");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ExitedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Gender = 0,
                            JoinedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("SalaryIds")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("To")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SalaryIds");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Address", b =>
                {
                    b.HasOne("EmployeeWebAPIProject.Models.City", "City")
                        .WithOne("Address")
                        .HasForeignKey("EmployeeWebAPIProject.Models.Address", "CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeWebAPIProject.Models.Country", "Country")
                        .WithOne("Address")
                        .HasForeignKey("EmployeeWebAPIProject.Models.Address", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.City", b =>
                {
                    b.HasOne("EmployeeWebAPIProject.Models.Country", "Country")
                        .WithOne("City")
                        .HasForeignKey("EmployeeWebAPIProject.Models.City", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Employee", b =>
                {
                    b.HasOne("EmployeeWebAPIProject.Models.Address", "Address")
                        .WithOne("Employee")
                        .HasForeignKey("EmployeeWebAPIProject.Models.Employee", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeWebAPIProject.Models.Country", "Country")
                        .WithOne("Employee")
                        .HasForeignKey("EmployeeWebAPIProject.Models.Employee", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeWebAPIProject.Models.Employee", null)
                        .WithMany("Subordinates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeWebAPIProject.Models.Employee", "Superior")
                        .WithOne()
                        .HasForeignKey("EmployeeWebAPIProject.Models.Employee", "SuperiorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Country");

                    b.Navigation("Superior");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.JobCategory", b =>
                {
                    b.HasOne("EmployeeWebAPIProject.Models.Employee", "Employee")
                        .WithMany("JobCategories")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Salary", b =>
                {
                    b.HasOne("EmployeeWebAPIProject.Models.Employee", "Employee")
                        .WithMany("Salaries")
                        .HasForeignKey("SalaryIds")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Address", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.City", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Country", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeWebAPIProject.Models.Employee", b =>
                {
                    b.Navigation("JobCategories");

                    b.Navigation("Salaries");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
